require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")


platform :ios, '13'
install! 'cocoapods', :deterministic_uuids => false

def shared_pods
  pod 'segment-analytics-react-native', :path => '../node_modules/@segment/analytics-react-native/'
  pod 'TOCropViewController'

  pod 'react-native-google-cast/NoBluetooth', path: '../node_modules/react-native-google-cast/'
  pod 'google-cast-sdk-no-bluetooth'

end

production = ENV["PRODUCTION"] == "1"

target 'fitbody' do
  use_expo_modules!
  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # to enable hermes on iOS, change `false` to `true` and then install pods
    # :hermes_enabled => flags[:hermes_enabled],
    :hermes_enabled => true,
    :fabric_enabled => flags[:fabric_enabled],
    # :flipper_configuration => FlipperConfiguration.disabled,
    :flipper_configuration => FlipperConfiguration.enabled(['Debug'], { 'Flipper' => '0.189.0'}),
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  shared_pods

  # pod 'expo-dev-menu', path: '../node_modules/expo-dev-menu', :configurations => :debug
  # pod 'expo-dev-launcher', path: '../node_modules/expo-dev-launcher', :configurations => :debug

  # use_native_modules!
end

target 'fitbody BETA' do
  use_expo_modules!
  config = use_native_modules!
  
  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # to enable hermes on iOS, change `false` to `true` and then install pods
    # :hermes_enabled => flags[:hermes_enabled],
    :hermes_enabled => true,
    :fabric_enabled => flags[:fabric_enabled],
    # :flipper_configuration => FlipperConfiguration.disabled,
    :flipper_configuration => FlipperConfiguration.enabled(['Debug'], { 'Flipper' => '0.189.0'}),
    # :flipper_configuration => FlipperConfiguration.enabled(['Debug'], { 'Flipper' => '0.163.0'}),
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  shared_pods
  
  # pod 'expo-dev-menu', path: '../node_modules/expo-dev-menu', :configurations => :debug
  # pod 'expo-dev-launcher', path: '../node_modules/expo-dev-launcher', :configurations => :debug

  # use_native_modules!
end

post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  begin
    expo_patch_react_imports!(installer)
  rescue => e
    Pod::UI.warn e
  end
end

# post_install do |installer|
#   flipper_post_install(installer)
# end
post_install do |installer|
  react_native_post_install(
    installer,
    # Set `mac_catalyst_enabled` to `true` in order to apply patches
    # necessary for Mac Catalyst builds
    :mac_catalyst_enabled => false
  )
  __apply_Xcode_12_5_M1_post_install_workaround(installer)
  # flipper_post_install(installer)

  # This is necessary for Xcode 14, because it signs resource bundles by default
  # when building for devices.
  installer.target_installation_results.pod_target_installation_results
    .each do |pod_name, target_installation_result|
    target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
      resource_bundle_target.build_configurations.each do |config|
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      end
    end
  end

  # installer.pods_project.targets.each do |target|
  #   target.build_configurations.each do |config|
  #   # some older pods don't support some architectures, anything over iOS 11 resolves that
  #     config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
  #   end
  # end
end