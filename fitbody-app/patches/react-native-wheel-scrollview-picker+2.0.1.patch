diff --git a/node_modules/react-native-wheel-scrollview-picker/index.tsx b/node_modules/react-native-wheel-scrollview-picker/index.tsx
index 61ee5c5..8cb4627 100644
--- a/node_modules/react-native-wheel-scrollview-picker/index.tsx
+++ b/node_modules/react-native-wheel-scrollview-picker/index.tsx
@@ -1,4 +1,4 @@
-import React, { useCallback, useEffect, useRef, useState } from "react";
+import React, { useCallback, useEffect, useRef, useState, useImperativeHandle } from "react";
 import {
   Dimensions,
   NativeScrollEvent,
@@ -55,12 +55,12 @@ export type ScrollPickerProps = {
   scrollViewComponent?: any;
 };
 
-export default function ScrollPicker({
-  itemHeight = 30,
-  style,
-  scrollViewComponent,
-  ...props
-}: ScrollPickerProps): JSX.Element {
+export type ScrollPickerRef = {
+  scrollToIndex: (val: number) => void
+}
+
+const ScrollPicker = React.forwardRef((propsState: ScrollPickerProps, ref: React.ForwardedRef<ScrollPickerRef>) => {
+  const { itemHeight = 30, style, scrollViewComponent, ...props } = propsState;
   const [initialized, setInitialized] = useState(false);
   const [selectedIndex, setSelectedIndex] = useState(
     props.selectedIndex && props.selectedIndex >= 0 ? props.selectedIndex : 0
@@ -71,6 +71,13 @@ export default function ScrollPicker({
   const [momentumStarted, setMomentumStarted] = useState(false);
   const [timer, setTimer] = useState<NodeJS.Timeout | null>(null);
 
+  useImperativeHandle(ref, () => ({
+    scrollToIndex: (val: number) => {
+      setSelectedIndex(val);
+      sView?.current?.scrollTo({ y: val * itemHeight });
+    },
+  }));
+
   const wrapperHeight =
     props.wrapperHeight ||
     (isViewStyle(style) && isNumeric(style.height)
@@ -242,7 +249,9 @@ export default function ScrollPicker({
       </CustomScrollViewComponent>
     </View>
   );
-}
+})
+
+export default ScrollPicker
 
 const styles = StyleSheet.create({
   itemWrapper: {
